{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","className","onSubmit","e","preventDefault","trim","length","category","type","value","onChange","target","required","getGifs","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","aria-hidden","divRoot","document","querySelector","ReactDOM","render"],"mappings":"mMASaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAOzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAoBA,OACI,qBAAKC,UAAU,+CAAf,SACI,sBAAMA,UAAU,iBAAiBC,SAbpB,SAAAC,GACjBA,EAAEC,iBAGEL,EAAWM,OAAOC,OAAS,IAE3BT,GAAe,SAACU,GAAD,OAAeR,GAAf,mBAA6BQ,OAC5CP,EAAc,MAMd,SACI,sBAAKC,UAAU,aAAf,UACI,uBACIO,KAAK,OACLC,MAAOV,EAEPW,SAzBM,SAAAP,GAEtBH,EAAcG,EAAEQ,OAAOF,QAwBPG,UAAQ,IAEZ,qBAAKX,UAAU,cACf,yD,+BC7CFY,EAAO,uCAAG,WAAON,GAAP,uBAAAO,EAAA,6DAEdC,EAFc,iDAEiCC,UAAUT,GAF3C,+DAIDU,MAAMF,GAJL,cAIdG,EAJc,gBAQGA,EAAKC,OARR,uBAQZC,EARY,EAQZA,KAIFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MAEXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAjBtB,kBAsBbM,GAtBa,4CAAH,sDCDZO,EAAc,SAAC,GAAmB,IAAjBH,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAGjC,OACI,sBAAKd,UAAU,QAAf,UACI,yBACA,sBAAKA,UAAU,UAAf,UACI,qBAAK4B,IAAKd,EAAKe,IAAKL,IACpB,kCAAKA,EAAL,cCLHM,EAAU,SAAC,GAAgB,IAAfxB,EAAc,EAAdA,SAGrB,ECHwB,SAAEA,GAE1B,MAA0BT,mBAAS,CAC/BsB,KAAM,GACNY,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAmBA,OAbAC,qBAAW,WAEPtB,EAAQN,GAEH6B,MAAM,SAAAC,GAEHH,EAAS,CACLd,KAAMiB,EACNL,SAAS,SAGtB,CAACzB,IAEG0B,EDlBwBK,CAAc/B,GAAjCmB,EAAZ,EAAON,KAAaY,EAApB,EAAoBA,QAEpB,OACI,qCACI,qBAAK/B,UAAU,YAAf,SACA,mCAAOM,EAAP,SAICyB,GAAW,2CAEZ,qBAAK/B,UAAU,YAAf,SAEIyB,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAEQA,GADEA,EAAIC,aEdrBe,EAAe,WAGxB,MAAoCzC,mBAAS,CAAC,cAA9C,mBAAO0C,EAAP,KAAmB3C,EAAnB,KASA,OACI,qCACI,qBAAKI,UAAU,0DAAf,SACC,qBAAIA,UAAU,UAAd,UACI,sBAAMwC,cAAY,OAAlB,yBADJ,cAC0D,sBAAMA,cAAY,OAAlB,8BAI3D,cAAC,EAAD,CAAa5C,cAAeA,IAK5B,6BAgBQ2C,EAAWlB,KAAK,SAAAf,GAAQ,OAEpB,aADA,CACC,EAAD,CAEIA,SAAaA,GADLA,YChD9BmC,G,MAAUC,SAASC,cAAc,UAEvCC,IAASC,OAAO,cAAC,EAAD,IAAmBJ,K","file":"static/js/main.c39a422a.chunk.js","sourcesContent":["// 7._Componente_AddCategory\r\n// Crear carpeta components-archivo AddCategory.js\r\n\r\n// Snippets: rafc Crea un import de react export de addcategory y crea un return\r\nimport React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// Ir a GifExpertApp.js\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n    // La caja de texto debe tener un useState, para saber lo que se escribe\r\n    // const [inputValue, setInputValue] = useState('Hola Mundo');\r\n\r\n    // Warning: A component is changing an uncontrolled input to be controlled.\r\n    // const [inputValue, setInputValue] = useState();//undefined \r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    // Manejo onChange\r\n    const handleInputChange = e => {\r\n        // console.log(e.target.value) // para ver el valor\r\n        setInputValue(e.target.value);       \r\n    }\r\n\r\n    // Formulario form\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n        \r\n        // Elimina espacio en blanco inicio y final. 3Caracteres minimo\r\n        if (inputValue.trim().length > 3) {\r\n            \r\n            setCategories( (category) => [inputValue,...category ]); \r\n            setInputValue('');// para resetear useState y el botón vuelva a quedar vacio    \r\n        }        \r\n    };\r\n\r\n    return (     \r\n        <div className=\"cuerpo animate__animated animate__bounceInUp\">               \r\n            <form className=\"cuerpo-wrapper\" onSubmit={handleSubmit}>   \r\n                <div className=\"input-data\">        \r\n                    <input \r\n                        type=\"text\"\r\n                        value={inputValue}\r\n                        // onChange se gatilla cada vez que el evento cambie\r\n                        onChange={handleInputChange}\r\n                        required\r\n                    /> \r\n                    <div className=\"underline\"></div>\r\n                    <label>Busca tu Gif</label>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\nsetCategories: PropTypes.func.isRequired\r\n}","\r\n\r\n     // Esto Funciona PERO la lógica tiene un problema\r\n  export    const getGifs = async (category) => {\r\n        // encodeURI para eliminar espacios en blancos entre otros\r\n        const url =`https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=zjBU1zbk914dIioL8unj5J6dXCkxaRjm`;        \r\n        \r\n        const resp = await fetch(url);\r\n        // Si se hizo correctamente\r\n        // resp.ok\r\n        // La respuesta es en formato .json\r\n        const { data } = await resp.json();\r\n\r\n        // Extraer información\r\n        // console.log(data);\r\n        const gifs = data.map( img => {\r\n            return {\r\n                id: img.id,\r\n                title: img.title,\r\n                // añadir ? para preguntar que si vienen las imagenes, entonces lo utilice\r\n                url: img.images?.downsized_medium.url\r\n            }\r\n        })\r\n        // console.log(gifs);\r\n        // usar el useState, la función setImages, el nuevo estado será los gifs\r\n        return gifs;\r\n    }","import React from 'react'\r\n// rafc\r\nexport const GifGridItem = ({ title, url}) => {//(props) => {\r\n    // console.log(props.img);\r\n    // console.log(id, title, url);\r\n    return (\r\n        <div className=\"card \">\r\n            <span></span>\r\n            <div className=\"content\">              \r\n                <img src={url} alt={title} />\r\n                <p> {title} </p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n// Custom Hook es una forma extraer lógica de algún componente o reutilizar y extraerla de tal manera que sea sencillo utilizarla\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\n// Componente\r\nexport const GifGrid = ({category}) => {\r\n    \r\n    // Llamado a custom Hook\r\n    const {data:images, loading} = useFetchGifs( category );\r\n\r\n    return (\r\n        <>\r\n            <div className=\"titulando\">\r\n            <h3> { category } </h3>\r\n            </div>\r\n            \r\n\r\n            {loading && <p>Loading...</p>}\r\n\r\n            <div className=\"card-grid\">\r\n            {                \r\n                images.map( img => (\r\n                    <GifGridItem \r\n                        key= {img.id}                       \r\n                        {...img}\r\n                    />\r\n                ))\r\n            }  \r\n            </div>\r\n        \r\n        </>\r\n        \r\n    )\r\n}\r\n\r\n// npm run build","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n// Custom Hook pueden funcionan como un Functional components. Pueden usar efectos, reducer, contextos.\r\n\r\n//Custom Hook\r\nexport const useFetchGifs = ( category ) => {\r\n    //Estado\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    // Evaluar useEffect cuando la category cambia\r\n    useEffect( () => {\r\n        // getGifs es una Promise. Petición http\r\n        getGifs(category)\r\n            //Ponemos las imagenes \r\n            .then( imgs => {\r\n                //setState dispara una renderización del componente GifGrid\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                });\r\n            })\r\n    }, [category])   \r\n\r\n    return state // {data:[], loading:true}\r\n}","// 5._GifExpertApp_-_Component\r\n// https://es.reactjs.org/docs/faq-structure.html\r\n// https://hackernoon.com/structuring-projects-and-naming-components-in-react-1261b6e18d76\r\nimport { useState } from 'react';\r\nimport {AddCategory} from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\n// Lista de Categorías y mostrar en pantalla\r\n// Componente FC\r\nexport const GifExpertApp = () => {\r\n\r\n    // const categories = ['One Punch', 'Samurai X', 'Dragon Ball'];\r\n    const [categories, setCategories] = useState(['One Punch']);\r\n\r\n    // 7._Componente_AddCategory comentar const handleAdd = () =>.  Y el boton\r\n    // const handleAdd = () => {\r\n        // setCategories([...categories, 'Hunter x Hunter'])\r\n        // Otra forma de hacerlo\r\n        // setCategories( catego => [...catego, 'Hunter x Hunter'])\r\n    // };\r\n\r\n    return (\r\n        <>\r\n            <div className=\"contenedor-glitch animate__animated animate__fadeInLeft\">\r\n             <h2 className=\"glitch \">\r\n                 <span aria-hidden=\"true\">Gif API App</span>Gif API App<span aria-hidden=\"true\">Gif API App</span></h2>\r\n            </div>\r\n            \r\n            {/* Agregar AddCategory y importar */}\r\n            <AddCategory setCategories={setCategories}/>\r\n            \r\n            {/* <button onClick={handleAdd}>Agregar</button> */}\r\n            {/*En código html los muestra separados*/}\r\n            {/* Lista Ordenada, expresión de JS que regrese un valor */}\r\n            <ol>\r\n                {/* index.js:1 Warning: Each child in a list should have a unique \"key\" prop. */}\r\n                {/* {categories.map(category => <li>hola</li>)} */}\r\n\r\n                {/* No se hace: colocar el valor indice de map */}\r\n                {/* {categories.map((category, indice) => <li>{indice} hola</li>)} Resultado de indice es 0 1 2 */}\r\n                {/* {categories.map((category, indice) => <li>{indice + 1} hola</li>)} resultado de indice 1 2 3 */}\r\n                {/* Aquí el Warning se va, pero esto no se hace ¿Porque? es volatil, por que por ej posible  */}\r\n                {/* que el primer elemento se elimina, pero el primer indice 0 se mantiene solo disminuye el último. Por lo que no se tendrá un resultado esperado */}\r\n                {/* {categories.map((category, indice) => <li key={indice}> hola</li>)} */}\r\n\r\n                {/* La solución. Tener cuidado que no se repita un elemento, se obtiene un error, es este:*/}\r\n                {/* Warning: Encountered two children with the same key, `One Punch`. Keys should be unique */}\r\n\r\n                \r\n                {\r\n                    categories.map( category => (\r\n                        // <li key={category}> {category}</li>\r\n                        <GifGrid\r\n                            key = { category } \r\n                            category = { category } \r\n                        />\r\n                    ))\r\n                }\r\n \r\n                {/* Esto tiene un inconveniente: Si necesito agregar un elemento con el botón, No se podrá por  */}\r\n                {/* varias razones 1 Array es un const, 2 Como le digo a React que hubo un cambio en estas */}\r\n                {/* categorias y necesito que vuelva a renderizar el <ol>. Comentar el const Array */}\r\n                {/* y agregar arriba const [categories, setCategories] = useState. Funcionará igual, pero con un */}\r\n                {/* warning que setCategories aún no se usa */}\r\n            </ol>\r\n        </>\r\n    );\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {GifExpertApp} from './GifExpertApp';\nimport './index.css';\n\nconst divRoot = document.querySelector('#root');\n// GifExpert App\nReactDOM.render(<GifExpertApp /> , divRoot);\n\n\n\n"],"sourceRoot":""}